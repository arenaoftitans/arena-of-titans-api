{%- set unix_socket = api.get('socket', False) -%}
{%- set https = type in ('prod', 'staging') -%}

server {
    listen 80;
    {%- if https %}
    listen 443 ssl;
    {%- endif %}
    server_name {{ api.server_name }};

    {%- if https %}

    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;
    ssl_certificate /etc/letsencrypt/live/{{ api.server_name }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ api.server_name }}/privkey.pem;
    ssl_dhparam /etc/nginx/dhparam.pem;
    {%- endif %}

    access_log /var/log/nginx/aot-api-{{ type }}.access.log;
    error_log /var/log/nginx/aot-api-{{ type }}.error.log;

    root {{ api.root }};
    index index.html;

    location ~* .(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 1d;
    }

    location ~* .git {
        return 404;
    }

    # Needed for cerbot to renew its certificates.
    location ~* ^/\.well-known/.+ {
        try_files $request_uri =404;
    }

    location /static {
        add_header 'Access-Control-Allow-Methods' 'GET';
        add_header 'Access-Control-Allow-Origin' "$http_origin";
        try_files $uri $uri.svg =404;
    }

    location ~ ^/ws/([0-9]+|latest) {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        {%- if not unix_socket %}
        proxy_set_header Host $http_host:{{ api.ws_port }};
        {%- endif %}
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        {%- if unix_socket %}
        proxy_pass http://unix:{{ api.socket.replace('{version}', '$1') }};
        {%- else %}
        proxy_pass http://{{ api.host }}:{{ api.ws_port }} fail_timeout=0;
        {%- endif %}
    }

    location / {
        return 404;
    }
}
